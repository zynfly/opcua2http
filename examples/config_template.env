# ============================================================================
# OPC UA HTTP Bridge - Configuration Template
# ============================================================================
# Copy this file to .env and customize for your environment
# All values shown are defaults or examples

# ============================================================================
# CORE OPC UA CONFIGURATION
# ============================================================================

# OPC UA Server endpoint URL
# Format: opc.tcp://hostname:port
# Examples:
#   - Local server: opc.tcp://127.0.0.1:4840
#   - Remote server: opc.tcp://192.168.1.100:4840
#   - Hostname: opc.tcp://opcua-server.local:4840
OPC_ENDPOINT=opc.tcp://127.0.0.1:4840

# Security Mode
# 1 = None (no encryption, development only)
# 2 = Sign (message signing for integrity)
# 3 = SignAndEncrypt (full encryption, recommended for production)
OPC_SECURITY_MODE=1

# Security Policy
# Options: None, Basic128Rsa15, Basic256, Basic256Sha256, 
#          Aes128_Sha256_RsaOaep, Aes256_Sha256_RsaPss
# Note: Must be "None" when OPC_SECURITY_MODE=1
# Recommended for production: Basic256Sha256 or Aes128_Sha256_RsaOaep
OPC_SECURITY_POLICY=None

# Default namespace index for Node IDs
# Used when namespace is not specified in Node ID string
# Common values: 0 (OPC UA standard), 2 (custom server namespace)
OPC_NAMESPACE=2

# Client application URI
# Identifies this client to the OPC UA server
# Format: urn:organization:application-name
OPC_APPLICATION_URI=urn:CLIENT:NodeOPCUA-Client

# ============================================================================
# CONNECTION MANAGEMENT
# ============================================================================

# Maximum retry attempts per connection attempt
# Range: 1-100
# Higher values = more persistent connection attempts
CONNECTION_RETRY_MAX=5

# Initial delay before first connection attempt (milliseconds)
# Range: 0-10000
# Allows server startup time before connection
CONNECTION_INITIAL_DELAY=1000

# Global maximum reconnection attempts
# -1 = infinite retries (recommended for production)
# 0 = no retries
# >0 = specific number of retry cycles
CONNECTION_MAX_RETRY=-1

# Maximum delay between retry attempts (milliseconds)
# Range: 1000-300000 (1 second to 5 minutes)
# Caps exponential backoff delay
CONNECTION_MAX_DELAY=30000

# Base delay between retry attempts (milliseconds)
# Range: 1000-60000 (1 second to 1 minute)
# Used for exponential backoff calculation
CONNECTION_RETRY_DELAY=5000

# ============================================================================
# WEB SERVER CONFIGURATION
# ============================================================================

# HTTP server listening port
# Range: 1-65535
# Common values: 3000, 8080, 8000
# Note: Ports <1024 require elevated privileges on Linux
SERVER_PORT=3000

# ============================================================================
# SECURITY CONFIGURATION
# ============================================================================

# API Key Authentication
# Clients must include "X-API-Key: <value>" header
# Leave empty to disable API key authentication
# Generate secure key: openssl rand -base64 32
# Example: API_KEY=your_secure_api_key_here_32_chars_minimum
API_KEY=

# HTTP Basic Authentication - Username
# Leave empty to disable basic authentication
# Used with AUTH_PASSWORD for HTTP Basic Auth
AUTH_USERNAME=

# HTTP Basic Authentication - Password
# Leave empty to disable basic authentication
# Generate secure password: openssl rand -base64 24
# Example: AUTH_PASSWORD=your_secure_password_here
AUTH_PASSWORD=

# CORS (Cross-Origin Resource Sharing) - Allowed Origins
# Comma-separated list of allowed origins
# Examples:
#   - Allow all: *
#   - Single origin: https://app.example.com
#   - Multiple: https://app1.example.com,https://app2.example.com
# Production: Specify exact origins, avoid "*"
ALLOWED_ORIGINS=*

# ============================================================================
# CACHE CONFIGURATION
# ============================================================================

# Cache entry expiration time (minutes) - LEGACY
# Range: 1-1440 (1 minute to 24 hours)
# Entries older than this are removed during cleanup
# Higher values = less OPC UA traffic, potentially stale data
# Lower values = fresher data, more OPC UA traffic
CACHE_EXPIRE_MINUTES=60

# Subscription cleanup interval (minutes) - LEGACY
# Range: 1-1440 (1 minute to 24 hours)
# Unused subscriptions are removed after this period
# Higher values = keep subscriptions longer
# Lower values = more aggressive cleanup, less memory usage
SUBSCRIPTION_CLEANUP_MINUTES=30

# ============================================================================
# NEW CACHE TIMING CONFIGURATION
# ============================================================================

# Cache refresh threshold (seconds)
# When cache entry age exceeds this threshold, trigger background refresh
# Range: 1-3600 (1 second to 1 hour)
# Should be less than CACHE_EXPIRE_SECONDS
CACHE_REFRESH_THRESHOLD_SECONDS=3

# Cache expiration time (seconds)
# Entries older than this are considered expired and removed
# Range: 1-86400 (1 second to 24 hours)
# Should be greater than CACHE_REFRESH_THRESHOLD_SECONDS
CACHE_EXPIRE_SECONDS=10

# Cache cleanup interval (seconds)
# How often to run cleanup process to remove expired entries
# Range: 1-3600 (1 second to 1 hour)
CACHE_CLEANUP_INTERVAL_SECONDS=60

# ============================================================================
# BACKGROUND UPDATE CONFIGURATION
# ============================================================================

# Number of background update threads
# Range: 1-50
# Higher values = more concurrent updates, more CPU/memory usage
BACKGROUND_UPDATE_THREADS=3

# Background update queue size
# Maximum number of pending update requests
# Range: 1-100000
BACKGROUND_UPDATE_QUEUE_SIZE=1000

# Background update timeout (milliseconds)
# Maximum time to wait for OPC UA read operation
# Range: 1-300000 (1ms to 5 minutes)
BACKGROUND_UPDATE_TIMEOUT_MS=5000

# ============================================================================
# PERFORMANCE TUNING CONFIGURATION
# ============================================================================

# Maximum number of cache entries
# Range: 1-1000000
# Higher values = more memory usage, less frequent OPC UA reads
CACHE_MAX_ENTRIES=10000

# Maximum cache memory usage (MB)
# Range: 1-10240 (1MB to 10GB)
# Approximate limit, actual usage may vary
CACHE_MAX_MEMORY_MB=100

# Maximum concurrent read operations
# Range: 1-1000
# Higher values = more concurrent access, more CPU usage
CACHE_CONCURRENT_READS=10

# ============================================================================
# OPC UA OPTIMIZATION CONFIGURATION
# ============================================================================

# OPC UA read operation timeout (milliseconds)
# Range: 1-300000 (1ms to 5 minutes)
OPC_READ_TIMEOUT_MS=5000

# OPC UA batch read size
# Number of nodes to read in a single batch operation
# Range: 1-1000
OPC_BATCH_SIZE=50

# OPC UA connection pool size
# Number of concurrent OPC UA connections to maintain
# Range: 1-100
OPC_CONNECTION_POOL_SIZE=5

# ============================================================================
# LOGGING CONFIGURATION
# ============================================================================

# Log level
# Options: trace, debug, info, warn, error, critical
# - trace: Very detailed, for deep debugging
# - debug: Detailed operational information
# - info: General operational messages (default)
# - warn: Warning messages, non-critical issues
# - error: Error messages, operation failures
# - critical: Critical failures, service may stop
# Production: info or warn
# Development: debug or trace
LOG_LEVEL=info

# ============================================================================
# ADVANCED CONFIGURATION (Optional)
# ============================================================================

# These settings are typically not needed but available for fine-tuning

# OPC UA Session timeout (milliseconds)
# Default: 120000 (2 minutes)
# OPC_SESSION_TIMEOUT=120000

# OPC UA Secure channel lifetime (milliseconds)
# Default: 600000 (10 minutes)
# OPC_CHANNEL_LIFETIME=600000

# HTTP request timeout (seconds)
# Default: 30
# HTTP_REQUEST_TIMEOUT=30

# Maximum concurrent HTTP connections
# Default: 100
# HTTP_MAX_CONNECTIONS=100

# Cache maximum size (number of entries)
# Default: 10000
# CACHE_MAX_SIZE=10000

# Subscription publishing interval (milliseconds)
# Default: 1000 (1 second)
# SUBSCRIPTION_PUBLISH_INTERVAL=1000

# Subscription queue size
# Default: 10
# SUBSCRIPTION_QUEUE_SIZE=10



# ============================================================================
# ENVIRONMENT-SPECIFIC EXAMPLES
# ============================================================================

# --- Development Environment ---
# OPC_ENDPOINT=opc.tcp://localhost:4840
# OPC_SECURITY_MODE=1
# OPC_SECURITY_POLICY=None
# SERVER_PORT=3000
# LOG_LEVEL=debug
# API_KEY=
# ALLOWED_ORIGINS=*

# --- Staging Environment ---
# OPC_ENDPOINT=opc.tcp://staging-opcua.example.com:4840
# OPC_SECURITY_MODE=2
# OPC_SECURITY_POLICY=Basic256Sha256
# SERVER_PORT=3000
# LOG_LEVEL=info
# API_KEY=staging_api_key_here
# ALLOWED_ORIGINS=https://staging-app.example.com

# --- Production Environment ---
# OPC_ENDPOINT=opc.tcp://prod-opcua.example.com:4840
# OPC_SECURITY_MODE=3
# OPC_SECURITY_POLICY=Basic256Sha256
# SERVER_PORT=3000
# LOG_LEVEL=warn
# API_KEY=production_api_key_32_chars_minimum
# AUTH_USERNAME=admin
# AUTH_PASSWORD=secure_production_password
# ALLOWED_ORIGINS=https://app.example.com,https://dashboard.example.com
# CONNECTION_MAX_RETRY=-1
# CACHE_EXPIRE_MINUTES=120
# SUBSCRIPTION_CLEANUP_MINUTES=60

# ============================================================================
# NOTES
# ============================================================================
# 1. Never commit .env file with real credentials to version control
# 2. Use strong, randomly generated values for API_KEY and AUTH_PASSWORD
# 3. In production, always use OPC_SECURITY_MODE=3 with appropriate policy
# 4. Restrict ALLOWED_ORIGINS to specific domains in production
# 5. Monitor logs regularly and adjust LOG_LEVEL as needed
# 6. Test configuration changes in staging before production deployment
# 7. Keep this template updated when adding new configuration options
